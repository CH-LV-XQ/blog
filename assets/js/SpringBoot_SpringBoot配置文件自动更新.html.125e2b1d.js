"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5229],{6262:(t,e)=>{e.A=(t,e)=>{const o=t.__vccOpts||t;for(const[t,p]of e)o[t]=p;return o}},7232:(t,e,o)=>{o.r(e),o.d(e,{comp:()=>a,data:()=>r});var p=o(641);const i=o.p+"assets/img/application.86953929.png",n={},a=(0,o(6262).A)(n,[["render",function(t,e){return(0,p.uX)(),(0,p.CE)("div",null,e[0]||(e[0]=[(0,p.Fv)('<h1 id="springboot配置文件自动更新" tabindex="-1"><a class="header-anchor" href="#springboot配置文件自动更新"><span>SpringBoot配置文件自动更新</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在开发和运维Spring Boot项目的过程中，application.yml或application.properties等配置文件是必不可少的组成部分。这些文件中包含了服务运行所必需的各种配置信息。然而，在不同环境中部署时，往往需要对这些配置进行相应的调整。传统上，一旦修改了配置文件中的内容，就需要重启整个服务以使更改生效。这种做法不仅浪费时间，而且在频繁调整配置参数的情况下，极大地降低了开发和运维效率。</p><p>为了解决这一痛点，本文将详细介绍如何实现在不重启服务的前提下动态更新配置文件中的内容，从而显著提高工作效率，减少不必要的等待时间。</p><p>要实现动态更新配置文件的方式有很多种，比如可以设置一个定时任务监听配置文件修改状态，当修改后触发更新操作。本文介绍的一种方式是基于SpringCloud提供的一个用于动态刷新配置的核心类ContextRefresher，其实现原理如下：</p><figure><img src="'+i+'" alt="application.png" tabindex="0" loading="lazy"><figcaption>application.png</figcaption></figure><p>明白原理后，接下来就是具体的实现过程了。</p><h2 id="实现过程" tabindex="-1"><a class="header-anchor" href="#实现过程"><span>实现过程</span></a></h2><h3 id="一、pom-xml添加依赖" tabindex="-1"><a class="header-anchor" href="#一、pom-xml添加依赖"><span>一、pom.xml添加依赖</span></a></h3><p>此处需要添加两个依赖，一个是监听文件的commons-io，一个是刷新并加载配置内容的spring-cloud-context</p>',10)]))}]]),r=JSON.parse('{"path":"/SpringBoot/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.html","title":"SpringBoot配置文件自动更新","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-05-24T00:00:00.000Z","category":["SpringBoot"],"description":"SpringBoot配置文件自动更新 前言 在开发和运维Spring Boot项目的过程中，application.yml或application.properties等配置文件是必不可少的组成部分。这些文件中包含了服务运行所必需的各种配置信息。然而，在不同环境中部署时，往往需要对这些配置进行相应的调整。传统上，一旦修改了配置文件中的内容，就需要重启整...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/SpringBoot/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"SpringBoot配置文件自动更新"}],["meta",{"property":"og:description","content":"SpringBoot配置文件自动更新 前言 在开发和运维Spring Boot项目的过程中，application.yml或application.properties等配置文件是必不可少的组成部分。这些文件中包含了服务运行所必需的各种配置信息。然而，在不同环境中部署时，往往需要对这些配置进行相应的调整。传统上，一旦修改了配置文件中的内容，就需要重启整..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-24T13:56:13.000Z"}],["meta",{"property":"article:published_time","content":"2025-05-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-24T13:56:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot配置文件自动更新\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-24T13:56:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"实现过程","slug":"实现过程","link":"#实现过程","children":[{"level":3,"title":"一、pom.xml添加依赖","slug":"一、pom-xml添加依赖","link":"#一、pom-xml添加依赖","children":[]}]}],"git":{"createdTime":1748094973000,"updatedTime":1748094973000,"contributors":[{"name":"ch","email":"ch825523424@163.com","commits":1}]},"readingTime":{"minutes":1.29,"words":387},"filePathRelative":"SpringBoot/SpringBoot配置文件自动更新.md","localizedDate":"2025年5月24日","excerpt":"\\n<h2>前言</h2>\\n<p>在开发和运维Spring Boot项目的过程中，application.yml或application.properties等配置文件是必不可少的组成部分。这些文件中包含了服务运行所必需的各种配置信息。然而，在不同环境中部署时，往往需要对这些配置进行相应的调整。传统上，一旦修改了配置文件中的内容，就需要重启整个服务以使更改生效。这种做法不仅浪费时间，而且在频繁调整配置参数的情况下，极大地降低了开发和运维效率。</p>\\n<p>为了解决这一痛点，本文将详细介绍如何实现在不重启服务的前提下动态更新配置文件中的内容，从而显著提高工作效率，减少不必要的等待时间。</p>\\n","autoDesc":true}')}}]);